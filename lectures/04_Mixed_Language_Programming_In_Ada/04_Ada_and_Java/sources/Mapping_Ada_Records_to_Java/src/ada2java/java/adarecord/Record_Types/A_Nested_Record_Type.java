/*****************************************************************************
 * This file has been automatically generated by                             *
 *    ADA2JAVA (built with ASIS 2.0.R for GNAT GPL 2014 (20140331))          *
 * Original Ada unit: Record_Types                                           *
 * Generation timestamp: 201412211026                                        *
 *****************************************************************************/

package adarecord.Record_Types;

/**
 * @origin record_types.ads:3:9
 */
@SuppressWarnings("all")
public final class A_Nested_Record_Type extends com.adacore.ajis.internal.ada.AdaProxy {

   /**
    * @origin record_types.ads:3:9
    * @param this is passed by reference (non escapable)
    * @param Right is passed by reference (non escapable)
    */
   final public boolean equals (java.lang.Object Right) {
      adarecord.Ada2Java.Library.lock.lock ();
      try {
         int [] Id_JNI_45;
         java.lang.Object Id_JNI_46 = this;
         if (this.getClass () != Right.getClass ()) return false;
         if (Id_JNI_46 == null) {
            Id_JNI_45 = com.adacore.ajis.internal.ada.AdaAccess.simpleNullAccess ();
         } else {
            Id_JNI_45 = ((com.adacore.ajis.internal.ada.AdaProxy) Id_JNI_46).getAccess ();
         }
         int [] Id_JNI_49;
         java.lang.Object Id_JNI_50 = ((com.adacore.ajis.internal.ada.AdaProxy) Right);
         if (Id_JNI_50 == null) {
            Id_JNI_49 = com.adacore.ajis.internal.ada.AdaAccess.simpleNullAccess ();
         } else {
            Id_JNI_49 = ((com.adacore.ajis.internal.ada.AdaProxy) Id_JNI_50).getAccess ();
         }
         boolean Id_JNI_54 = equals_Id_JNI_41 (Id_JNI_45, Id_JNI_49);
         return Id_JNI_54;
      } finally {
         adarecord.Ada2Java.Library.lock.unlock ();
      }
   } // equals

   /**
    * @origin record_types.ads:3:9
    * @param this is passed by reference (non escapable)
    * @return is passed by reference (escapable)
    */
   public int [] internalClone () {
      adarecord.Ada2Java.Library.lock.lock ();
      try {
         int [] Id_JNI_62;
         adarecord.Record_Types.A_Nested_Record_Type Id_JNI_63 = this;
         if (Id_JNI_63 == null) {
            Id_JNI_62 = com.adacore.ajis.internal.ada.AdaAccess.simpleNullAccess ();
         } else {
            Id_JNI_62 = ((com.adacore.ajis.internal.ada.AdaProxy) Id_JNI_63).getAccess ();
         }
         int [] Id_JNI_71 = ((int []) internalClone_Id_JNI_58 (Id_JNI_62));
         return Id_JNI_71;
      } finally {
         adarecord.Ada2Java.Library.lock.unlock ();
      }
   } // internalClone

   /**
    * @origin record_types.ads:3:9
    * @return is passed by reference (escapable)
    */
   public A_Nested_Record_Type () {
      super (new com.adacore.ajis.internal.ada.AdaAccess (null));
      adarecord.Ada2Java.Library.lock.lock ();
      try {
         this.adaAccess = A_Nested_Record_Type_Id_JNI_75 ();
         this.myOwner = com.adacore.ajis.IProxy.Owner.PROXY;
         this.myAllocator = com.adacore.ajis.IProxy.Allocator.DYNAMIC;
      } finally {
         adarecord.Ada2Java.Library.lock.unlock ();
      }
   } // A_Nested_Record_Type

   public A_Nested_Record_Type (com.adacore.ajis.internal.ada.AdaAccess access) {
      this.adaAccess = access.fAcc;
   }

   /**
    * @origin record_types.ads:3:9
    * @param this is passed by reference (non escapable)
    */
   public void deallocateNativeObject () {
      adarecord.Ada2Java.Library.lock.lock ();
      try {
         int [] Id_JNI_90;
         adarecord.Record_Types.A_Nested_Record_Type Id_JNI_91 = this;
         if (Id_JNI_91 == null) {
            Id_JNI_90 = com.adacore.ajis.internal.ada.AdaAccess.simpleNullAccess ();
         } else {
            Id_JNI_90 = ((com.adacore.ajis.internal.ada.AdaProxy) Id_JNI_91).getAccess ();
         }
         deallocateNativeObject_Id_JNI_86 (Id_JNI_90);
      } finally {
         adarecord.Ada2Java.Library.lock.unlock ();
      }
   } // deallocateNativeObject

   /**
    * @origin record_types.ads:4:7
    * @param this is passed by reference (non escapable)
    */
   final public int Integer_Field () {
      adarecord.Ada2Java.Library.lock.lock ();
      try {
         int [] Id_JNI_97;
         adarecord.Record_Types.A_Nested_Record_Type Id_JNI_98 = this;
         if (Id_JNI_98 == null) {
            Id_JNI_97 = com.adacore.ajis.internal.ada.AdaAccess.simpleNullAccess ();
         } else {
            Id_JNI_97 = ((com.adacore.ajis.internal.ada.AdaProxy) Id_JNI_98).getAccess ();
         }
         int Id_JNI_103 = Integer_Field_Id_JNI_93 (Id_JNI_97);
         return Id_JNI_103;
      } finally {
         adarecord.Ada2Java.Library.lock.unlock ();
      }
   } // Integer_Field

   /**
    * @origin record_types.ads:4:7
    * @param this is passed by reference (non escapable)
    */
   final public void Integer_Field (int Value) {
      adarecord.Ada2Java.Library.lock.lock ();
      try {
         int [] Id_JNI_111;
         adarecord.Record_Types.A_Nested_Record_Type Id_JNI_112 = this;
         if (Id_JNI_112 == null) {
            Id_JNI_111 = com.adacore.ajis.internal.ada.AdaAccess.simpleNullAccess ();
         } else {
            Id_JNI_111 = ((com.adacore.ajis.internal.ada.AdaProxy) Id_JNI_112).getAccess ();
         }
         Integer_Field_Id_JNI_107 (Id_JNI_111, Value);
      } finally {
         adarecord.Ada2Java.Library.lock.unlock ();
      }
   } // Integer_Field

   native private boolean equals_Id_JNI_41 (int [] Left, int [] Right);

   native private int [] internalClone_Id_JNI_58 (int [] This);

   native private int [] A_Nested_Record_Type_Id_JNI_75 ();

   native private void deallocateNativeObject_Id_JNI_86 (int [] Obj);

   native private int Integer_Field_Id_JNI_93 (int [] This);

   native private void Integer_Field_Id_JNI_107 (int [] This, int Value);

   static {
      adarecord.Ada2Java.Library.load ();
   }

} // A_Nested_Record_Type
